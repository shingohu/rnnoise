// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/rnnoise.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class RnnoiseBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RnnoiseBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RnnoiseBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int get_frame_size() {
    return _get_frame_size();
  }

  late final _get_frame_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('get_frame_size');
  late final _get_frame_size = _get_frame_sizePtr.asFunction<int Function()>();

  void process_frame(
    ffi.Pointer<ffi.Void> handle,
    ffi.Pointer<ffi.Float> out,
    ffi.Pointer<ffi.Float> in1,
    int inSize,
  ) {
    return _process_frame(
      handle,
      out,
      in1,
      inSize,
    );
  }

  late final _process_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>, ffi.Int64)>>('process_frame');
  late final _process_frame = _process_framePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, int)>();

  ffi.Pointer<ffi.Void> create() {
    return _create();
  }

  late final _createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>('create');
  late final _create =
      _createPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  void destroy(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _destroy(
      handle,
    );
  }

  late final _destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'destroy');
  late final _destroy =
      _destroyPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}
